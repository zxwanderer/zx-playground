exports.initModuleStruct = function (moduleTarget) {
  const RasmAssemble = moduleTarget.cwrap('RasmAssembleInfo', 'number', ['string', 'number', 'number', 'number', 'number']);
  const RasmFreeInfoStruct = moduleTarget.cwrap('RasmFreeInfoStruct', 'void', ['number']);
  
  return {
    RasmAssemble,
    RasmFreeInfoStruct,
    destPtr: moduleTarget._malloc(4),
    destLenPtr: moduleTarget._malloc(4),
    infoPtr: moduleTarget._malloc(4)
  }
}

const SYSVARS = [0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x21, 0x0d, 0x0d, 0x23, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x00, 0xff, 0xcd, 0x00, 0xa4, 0x61, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xff, 0x1e, 0x00, 0x01, 0x38, 0x00, 0x00, 0xff, 0x5c, 0x00, 0x00, 0xb6, 0x5c, 0xbb, 0x5c, 0xcb, 0x5c, 0xff, 0x5c, 0xca, 0x5c, 0x00, 0x5d, 0x03, 0x5d, 0xfe, 0x5c, 0x38, 0x5d, 0x05, 0x5d, 0x05, 0x5d, 0x05, 0x5d, 0x2d, 0x92, 0x5c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x1a, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x58, 0xff, 0x00, 0x00, 0x21, 0x00, 0x5b, 0x21, 0x17, 0x40, 0x40, 0xe0, 0x50, 0x21, 0x16, 0x21, 0x17, 0x03, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x61, 0xff, 0xff, 0xf4, 0x09, 0xa8, 0x10, 0x4b, 0xf4, 0x09, 0xc4, 0x15, 0x53, 0x81, 0x0f, 0xc4, 0x15, 0x52, 0xf4, 0x09, 0xc4, 0x15, 0x50, 0x80, 0x00, 0x0a, 0x0d, 0x00, 0xfd, 0x32, 0x34, 0x39, 0x39, 0x39, 0x0e, 0x00, 0x00, 0xa7, 0x61, 0x00, 0x0d, 0x00, 0x14, 0x0d, 0x00, 0xef, 0x22, 0x62, 0x61, 0x7a, 0x65, 0x6d, 0x61, 0x74, 0x31, 0x22, 0xaf, 0x0d, 0x00, 0x1e, 0x0e, 0x00, 0xf9, 0xc0, 0x33, 0x32, 0x37, 0x36, 0x38, 0x0e, 0x00, 0x00, 0x00, 0x80, 0x00, 0x0d, 0x80, 0xef, 0x22, 0x22, 0x0d, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x6d, 0x61, 0x74, 0x31, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x61, 0x7a, 0x65, 0x6d, 0x61, 0x74, 0x31, 0x20, 0x20, 0x03]

exports.assembleToSnapshot = function (moduleTarget, moduleStruct, source) {
  const result = moduleStruct.RasmAssemble(source, source.length, moduleStruct.destPtr, moduleStruct.destLenPtr, moduleStruct.infoPtr);
  const destLen = moduleTarget.getValue(moduleStruct.destLenPtr, 'i32');
  const dest = moduleTarget.getValue(moduleStruct.destPtr, 'i32');
  const info = moduleTarget.getValue(moduleStruct.infoPtr, 'i32');
  let errorPtr = moduleTarget.getValue(info, 'i32');
  const nbError = moduleTarget.getValue(info + 4, 'i32');
  const maxError = moduleTarget.getValue(info + 8, 'i32');
  const warnErr = moduleTarget.getValue(info + 12, 'i32');
  if (result != 0) {
      const errorMessages = [];
      for (let i = 0; i < nbError; i++) {
          const line = moduleTarget.getValue(errorPtr + 4, 'i32');
          const msgPtr = moduleTarget.getValue(errorPtr + 8, 'i32');
          const lenMsg = moduleTarget.getValue(errorPtr + 12, 'i32');
          errorMessages.push("line " + line + ": " + moduleTarget.UTF8ToString(msgPtr, lenMsg));
          errorPtr += 20;
      }
      moduleStruct.RasmFreeInfoStruct(info);
      return { success: false, errorMessages: errorMessages };
  } else {
      const start = moduleTarget.getValue(info + 32, 'i32');
      const destArray = new Uint8Array(moduleTarget.HEAPU8.buffer, dest, destLen);
      moduleStruct.RasmFreeInfoStruct(info);
      moduleTarget._free(dest);

      const snapshotMemory = new Uint8Array(0xc000);
      for (let i = 0x1800; i < 0x1b00; i++) {
          snapshotMemory[i] = 0x38;
      }
      for (let i = 0; i < SYSVARS.length; i++) {
          snapshotMemory[i + 0x1c00] = SYSVARS[i];
      }
      for (let i = 0; i < destLen; i++) {
          snapshotMemory[start + i - 0x4000] = destArray[i];
      }
      const snapshot = {
          registers: {
              'AF': (start & 0xff) << 8,
              'BC': start,
              'HL': 0,
              'PC': start,
              'SP': start - 2,
              'IR': 0,
              'DE': 0,
              'BC_': 0,
              'DE_': 0,
              'HL_': 0x2758,
              'AF_': 0,
              'IY': 0x5c3a,
              'IX': 0,
              'iff1': 1,
              'iff2': 1,
              'im': 1,
          },
          ulaState: {
              borderColour: 0,
              pagingFlags: 0x10,
          },
          model: 128,
          memoryPages: {
              5: new Uint8Array(snapshotMemory.buffer, 0, 0x4000),
              2: new Uint8Array(snapshotMemory.buffer, 0x4000, 0x4000),
              0: new Uint8Array(snapshotMemory.buffer, 0x8000, 0x4000),
          },
          tstates: 0,
      };

      return { success: true, snapshot: snapshot, codeLength: destLen };

  }

}